spanish.grades <- c(42,15,73,52,68)
# Create a data.frame variable `students` by combining your vectors `first.names`, `math.grades`, and `spanish.grades`
students <- data.frame(first.names, math.grades, spanish.grades)
# Create a variable `num.students` that contains the number of rows in your data.frame `students`
num.students <- nrow(students)  #### IS IT okay if students use first.names?
# Create a variable `num.courses` that contains the number of columns in your data.frame `students` minus one (b/c of their names)
num.courses <- ncol(students)
# Add a new column `grade.diff` to your dataframe, which is equal to `students$math.grades` minus `students$spanish.grades`
students$grade.diff <- students$math.grades - students$spanish.grades
# Add another column `better.at.math` as a boolean (TRUE/FALSE) variable that indicates that a student got a better grade in math
students$better.at.math <- math.grades > spanish.grades
# Create a variable `num.better.at.math` that is the number (i.e., one numeric value) of students better at math
num.better.at.math <- sum(students$better.at.math)
# Write your `students` data.frame to a new .csv file inside your data/ directory with the filename `grades.csv`. Make sure not to write row names.
write.csv(students, file = "./data/grades.csv", row.names = FALSE)
################################### Loading R Data (28 points) ###################################
# In this section, you'll work with some data that comes built into the r environment.
# Load the `Titanic` data set. You may also want to use RStudio to `View()` it to learn about its rows and columns.
# This data set actually loads in a format called a *table*
# You can use ?table to learn more about tables.
# This is slightly different than a data frame. Use the `is.data.frame()` function to confirm this.
is.data.frame(Titanic)
# You should convert the `Titanic` variable into a data frame; you can use the `data.frame()` function or `as.data.frame()`
# Be sure to **not** treat strings as factors!
Titanic.data <- data.frame(Titanic)
# Create a variable `children` that are the rows of the data frame with information about children on the Titanic.
children <- Titanic.data[Titanic.data$Age == 'Child',]
# Create a variable `num.children` that is the total number of children on the Titanic.
# Hint: remember the `sum()` function!
num.children <- sum(children$Freq)
# Create a variable `most.lost` which has row with the largest absolute number of losses (people who did not survive).
# Tip: you can use multiple statements (lines of code), such as to make "intermediate" sub-frames (similar to what you did with the `children` variables)
dead <- Titanic.data[Titanic.data$Survived == 'No',]
most.lost <- dead[dead$Freq == max(dead$Freq),]
# Define a function called `SurvivalRate` that takes in a ticket class (e.g., "1st", "2nd") as an argument.
# This function should return a sentence describing the total survival rate of men vs. "women and children" in that ticketing class.
# For example: `"Of Crew class, 87% of women and children survived and 22% of men survived."`
# The approach you take to generating the sentence to return is up to you. A good solution will likely utilize
# intermediate variables (subsets of data frames) and filtering to produce the required data.
# Avoid using a "loop" in R!
SurvivalRate <- function(ticket.class) {
lived <- Titanic.data[Titanic.data$Class == ticket.class & Titanic.data$Survived == 'Yes',]
all.lived <- sum(lived$Freq)
men.lived <- sum(lived$Freq[lived$Sex == 'Male'])
women.lived <- all.lived - men.lived
died <- Titanic.data[Titanic.data$Class == ticket.class & Titanic.data$Survived == 'No',]
all.died <- sum(died$Freq)
men.died <- sum(died$Freq[died$Sex == 'Male'])
women.died <- all.died - men.died
women.percent <- round((women.lived / (women.lived + women.died)) * 100)
men.percent <- round((men.lived / (men.died + men.lived))*100)
return(paste("Of", ticket.class, "class,", women.percent, " % of women and children survived", "and", men.percent, " % of men survived."))
}
# Call your `SurvivalRate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
SurvivalRate('Crew')
SurvivalRate('1st')
SurvivalRate('2nd')
SurvivalRate('3rd')
################################### Reading in Data (40 points) ###################################
# In this section, we'll read in a .csv file, which is essentially a tabular row/column layout
# This is like Microsoft Excel or Google Docs, but without the formatting.
# The .csv file we'll be working with has the life expectancy for each country in 1960 and 2013.
# We'll ask real-world questions about the data by writing the code that answers our question. Here are the steps you should walk through:
# Using the `read.csv` funciton, read the life_expectancy.csv file into a variable called `life.expectancy`
# Makes sure not to read strings as factors
life.expectancy <- read.csv(file = "data/life_expectancy.csv", stringsAsFactors = FALSE)
# Determine if life.expectancy is a data.frame by using the is.data.frame function. You may also want to View() it.
is.data.frame(life.expectancy)
# Create a column `life.expectancy$change` that is the change in life expectancy from 1960 to 2013
life.expectancy$change = life.expectancy$le_2013 - life.expectancy$le_1960
# Create a variable `most.improved` that is the name of the country with the largest gain in life expectancy
most.improved <- life.expectancy$country[life.expectancy$change == max(life.expectancy$change)]
# Create a variable `num.small.gain` that has the number of countries whose life expectance has improved fewer than 5 years between 1960 and 2013
num.small.gain <- nrow(life.expectancy[life.expectancy$change < 5,])
# Write a function `CountryChange` that takes in a country's name as a parameter, and returns it's change in life expectancy from 1960 to 2013
CountryChange <- function(country.name) {
return (life.expectancy$change[life.expectancy$country == country.name])
}
# Using your `CountryChange` funciton, create a variable `sweden.change` that is the change in life expectancy from 1960 to 2013 in Sweden
sweden.change <- CountryChange("Sweden")
# Define a function `LowestLifeExpInRegion` that takes in a **region** as an argument, and returns
# the **name of the country** with the lowest life expectancy in 2013 (in that region)
LowestLifeExpInRegion <- function(region) {
region.countries <- life.expectancy[life.expectancy$region == region & region.countries$le_2013 == min(region.countries$le_2013),]
lowest.country <- region.countries$country[region.countries$le_2013 == min(region.countries$le_2013)]
return(lowest.country)
}
# Using the function you just wrote, create a variable `lowest.in.south.asia` that is the country with the lowest life expectancy in 2013 in South Asia
lowest.in.south.asia <- LowestLifeExpInRegion("South Asia")
# Write a function `BiggerChange` that takes in two country names as parameters, and returns a sentence that
# describes which country experienced a larger gain in life expectancy (and by how many years).
# For example, if you passed the values "China", and "Bolivia" into your function, it would return this:
# "The country with the bigger change in life expectancy was China (gain=31.9), whose life expectancy grew by 7.4 years more than Bolivia's (gain=24.5)."
# Make sure to round your numbers.
BiggerChange <- function(country1, country2) {
change.first <- round(life.expectancy$change[life.expectancy$country == country1],1)
change.second <- round(life.expectancy$change[life.expectancy$country == country2],1)
if (change.first > change.second){
difference <- change.first-change.second
return(paste("The country with the bigger change in life expectancy was ", country1," (gain=",change.first,"), whose life expectancy grew by ", difference, " years more than ",country2,"'s (gain=", change.second,")", sep=""))
}
difference <- change.second-change.first
return(paste("The country with the bigger change in life expectancy was ", country2," (gain=", change.second,"), whose life expectancy grew by ",difference," years more than ",country1,"'s (gain=",change.first,")"), sep="")
}
# Using your `BiggerChange` funciton, create a variable `usa.or.france` that describes who had a larger gain in life expectancy (the United States or France)
usa.or.france <- BiggerChange("France", "United States")
# Write your `life.expectancy` data.frame to a new .csv file to your data/ directory with the filename `life_expectancy_with_change.csv`. Make sure not to write row names.
write.csv(life.expectancy, file="data/life_expectancy_with_change.csv", row.names = FALSE)
################################### Challenge (10 points) ###################################
# Create a variable that has the name of the region with the
# highest average change in life expectancy between the two time points.
# To do this, you'll need to compute the average change across the countries in each region, and then
# compare the averages across regions. Feel free to use any library of your choice, or base R functions.
highest.avg.change <- (life.expectancy %>% group_by(region) %>% summarize(regionChange = mean(change)) %>% filter(regionChange == max(regionChange)) %>% select(region))$region
# Create a *well labeled* plot (readable title, x-axis, y-axis) showing
# Life expectancy in 1960 v.s. Change in life expectancy
# Programmatically save (i.e., with code, not using the Export button) your graph as a .png file in your repo
# Then, in a comment below, provide an *interpretation* of the relationship you observe
# Feel free to use any library of your choice, or base R functions.
png(filename='./life-exp-graph.png')
p <- plot(life.expectancy$le_1960, life.expectancy$change, xlab = "Life Expectancy 1960", ylab="Change in life expectancy", main="Life expectancy 1960 v.s. Change in life expectancy")
dev.off()
# What is your interpretation of the observed relationship? Countries wih a higher life expectancy in 1960 don't have, on avg, as much increase in life expectancy as those with a lower one to start with. Perhaps it takes more work/resources to increase those with an already high life exp.
View(Titanic.data)
SurvivalRate <- function(ticket.class){
#filter down to class and then into seperate gender/age
##################################################3CHECK TITANIC DATA
class.filter <- titanic[titanic$Class == ticket.class,]
men <- class.filter[class.filter$Sex == "Male" & class.filter$Age == "Adult", ]
women <- class.filter[(class.filter$Sex == "Female" & class.filter$Age == "Adult"),]
children.filtered <- class.filter[class.filter$Age == "Child",]
#men tally
total.men <- nrow(men)
survived.men <- sum(men$Survived == "Yes")
men.percent <- round(survived.men / total.men, 2) * 100
#women and children tally
total.women.and.children <- nrow(women) + nrow(children.filtered)
survived.women.and.children <- sum(women$Survived == "Yes") + sum(children.filtered == "Yes")
women.and.children.percent <- round(survived.women.and.children / total.women.and.children, 2) * 100
return(paste("Of ", ticket.class, "", ", ", women.and.children.percent, "% of women and children survived and ", men.percent, "% of men survived", sep =""))
}
SurvivalRate('Crew')
SurvivalRate('1st')
SurvivalRate('2nd')
SurvivalRate('3rd')
titanic <- as.data.frame(Titanic)
SurvivalRate <- function(ticket.class){
#filter down to class and then into seperate gender/age
##################################################3CHECK TITANIC DATA
class.filter <- titanic[titanic$Class == ticket.class,]
men <- class.filter[class.filter$Sex == "Male" & class.filter$Age == "Adult", ]
women <- class.filter[(class.filter$Sex == "Female" & class.filter$Age == "Adult"),]
children.filtered <- class.filter[class.filter$Age == "Child",]
#men tally
total.men <- nrow(men)
survived.men <- sum(men$Survived == "Yes")
men.percent <- round(survived.men / total.men, 2) * 100
#women and children tally
total.women.and.children <- nrow(women) + nrow(children.filtered)
survived.women.and.children <- sum(women$Survived == "Yes") + sum(children.filtered == "Yes")
women.and.children.percent <- round(survived.women.and.children / total.women.and.children, 2) * 100
return(paste("Of ", ticket.class, "", ", ", women.and.children.percent, "% of women and children survived and ", men.percent, "% of men survived", sep =""))
}
# Call your `SurvivalRate()` function on each of the ticketing classes (`Crew`, `1st`, `2nd`, and `3rd`)
SurvivalRate('Crew')
SurvivalRate('1st')
SurvivalRate('2nd')
SurvivalRate('3rd')
# Exercise 4: DPLYR and flights data
# Install the nycflights13 package and read it in.  Require the dplyr package
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data.frame flights should now be accessible to you.  View it,
# and get some basic information about the number of rows/columns
View(flights)
dim(flights)
nrow(flights)
ncol(flights)
?flights
# Add a column that is the amount of time gained in the air
flights <- mutate(flights, gain = arr_delay - dep_delay)
# Sort your data.frame desceding by the column you just created
flights <- arrange(flights, desc(gain))
# Try doing the last 2 steps in a single operation using the pipe operator
flights <- flights %>% mutate(gain = arr_delay - dep_delay) %>% arrange(desc(gain))
# Make a histogram of the amount of gain using the `hist` command
hist(flights$gain)
# On average, did flights gain or lose time?
mean(flights$gain, na.rm = TRUE) # Lost 5 minutes!
# Create a data.frame of flights headed to seatac ('SEA'),
# and only include the column you just created
to.sea <- flights %>% select(gain, dest) %>% filter(dest == 'SEA')
# On average, did flights to seatac gain or loose time?
mean(to.sea$gain, na.rm = TRUE) # Lost 11 minutes!
OriginDestInterest <- function(my_origin, my_dest, interest) {
ret <- flights %>% filter(origin == my_origin, dest == my_dest) %>% select_(interest)
return(ret)
}
# Retireve the air_time column for flights from JFK to SEA
jfk.to.sea <- OriginDestInterest('JFK', 'SEA', 'air_time')
# What was the average air time of those flights (in hours)?  What was the min/max?
mean(jfk.to.sea$air_time, na.rm = TRUE)/60
min(jfk.to.sea$air_time, na.rm = TRUE)/60
max(jfk.to.sea$air_time, na.rm = TRUE)/60
jfk.to.sea
jfk.to.sea
OriginDestInterest <- function(my_origin, my_dest, interest) {
ret <- flights %>% filter(origin == my_origin, dest == my_dest) %>% select_(interest)
return(ret)
}
jfk.to.sea <- OriginDestInterest('JFK', 'SEA', 'air_time')
jfk.to.sea
install.packages("nycflights13")
install.packages("nycflights13")
install.packages("dplyr")
library(dplyr)
# The data.frame flights should now be accessible to you.  View it,
# and get some basic information about the number of rows/columns
View(flights)
dim(flights)
nrow(flights)
ncol(flights)
?flights
# Add a column that is the amount of time gained in the air
flights <- mutate(flights, gain = arr_delay - dep_delay)
# Sort your data.frame desceding by the column you just created
flights <- arrange(flights, desc(gain))
# Try doing the last 2 steps in a single operation using the pipe operator
flights <- flights %>% mutate(gain = arr_delay - dep_delay) %>% arrange(desc(gain))
# Make a histogram of the amount of gain using the `hist` command
hist(flights$gain)
# On average, did flights gain or lose time?
mean(flights$gain, na.rm = TRUE) # Lost 5 minutes!
# Create a data.frame of flights headed to seatac ('SEA'),
# and only include the column you just created
to.sea <- flights %>% select(gain, dest) %>% filter(dest == 'SEA')
# On average, did flights to seatac gain or loose time?
mean(to.sea$gain, na.rm = TRUE) # Lost 11 minutes!
OriginDestInterest <- function(my_origin, my_dest, interest) {
ret <- flights %>% filter(origin == my_origin, dest == my_dest) %>% select_(interest)
return(ret)
}
# Retireve the air_time column for flights from JFK to SEA
jfk.to.sea <- OriginDestInterest('JFK', 'SEA', 'air_time')
# What was the average air time of those flights (in hours)?  What was the min/max?
mean(jfk.to.sea$air_time, na.rm = TRUE)/60
min(jfk.to.sea$air_time, na.rm = TRUE)/60
max(jfk.to.sea$air_time, na.rm = TRUE)/60
jfk.to.sea
?flights
?flights
??flights
# Exercise 6: DPLYR join introduction
# Install the nycflights13 package and read it in. Require the dplyr package.
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delay for each destination, then use left_join
# to join on the "airports" dataframe, which has the airport info
avg.arrival.delay <- flights %>%
group_by(dest) %>%
summarise(avg.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
arrange(-avg.delay)
# Create a dataframe of the average arrival delay for each airline, then use left_join
# to join on the "airlines" dataframe, which has the airline info
avg.airline.delay <- flights %>%
group_by(carrier) %>%
summarise(avg.delay = mean(arr_delay, na.rm=TRUE)) %>%
left_join(airlines, by='carrier') %>%
arrange(-avg.delay)
### Bonus ###
# Calculate the average delay by city AND airline, then merge on the city and airline information
avg_city_airline <- flights %>%
group_by(dest, carrier) %>%
summarise(avg.delay = mean(arr_delay, na.rm=TRUE)) %>%
left_join(airlines, by='carrier') %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
left_join(airlines, by='carrier') %>%
ungroup() %>%
arrange(-avg.delay)
# Exercise 6: DPLYR join introduction
# Install the nycflights13 package and read it in. Require the dplyr package.
# install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# Create a dataframe of the average arrival delay for each destination, then use left_join
# to join on the "airports" dataframe, which has the airport info
avg.arrival.delay <- flights %>%
group_by(dest) %>%
summarise(avg.delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
arrange(-avg.delay)
# Create a dataframe of the average arrival delay for each airline, then use left_join
# to join on the "airlines" dataframe, which has the airline info
avg.airline.delay <- flights %>%
group_by(carrier) %>%
summarise(avg.delay = mean(arr_delay, na.rm=TRUE)) %>%
left_join(airlines, by='carrier') %>%
arrange(-avg.delay)
### Bonus ###
# Calculate the average delay by city AND airline, then merge on the city and airline information
avg_city_airline <- flights %>%
group_by(dest, carrier) %>%
summarise(avg.delay = mean(arr_delay, na.rm=TRUE)) %>%
left_join(airlines, by='carrier') %>%
mutate(faa = dest) %>%
left_join(airports, by = 'faa') %>%
left_join(airlines, by='carrier') %>%
ungroup() %>%
arrange(-avg.delay)
View(avg_city_airline)
View(avg_city_airline)
rep.table[rep.table$email == '<NULL>', 'email'] <- "Not available"
# Testing out the civic info API
# https://developers.google.com/civic-information/
# Set-up
##setwd('~/Documents/info201a-au17/admin/a5-new/')
library('httr')
library("jsonlite")
library('dplyr')
source('api-keys.R')
# Get representatives by address
if(!exists('address')) {
address <- "2199 S University Blvd, Denver, CO 80208"
}
query.params <- list(address = address, key = "AIzaSyB2mH7maqbArLn6_PSuzm-8zsnu1KcIy74")
resource <- "representatives"
base.url <- "https://www.googleapis.com/civicinfo/v2/"
endpoint <- paste0(base.url, resource)
response <- GET(endpoint, query = query.params)
# extract content from response
body <- content(response, "text")
parsed.data <- fromJSON(body)
state <- parsed.data$normalizedInput
# Data wrangling
offices <- parsed.data$offices
officials <- parsed.data$officials
# Expand officies by the number of elements in the `indices` column
# Hints: https://stackoverflow.com/questions/2894775/replicate-each-row-of-data-frame-and-specify-the-number-of-replications-for-each
num.to.rep <- unlist(lapply(parsed.data$offices$officialIndices, length))
expanded <- offices[rep(row.names(offices), num.to.rep),]
officials <- officials %>% mutate(index = row_number() -1)
expanded <- expanded %>% mutate(index = row_number() -1) %>%
rename(position = name)
rep.table <- left_join(officials, expanded, by='index')
# Make table into links
rep.table <- rep.table %>%
mutate(email = paste0('<', emails, '>'),
name = paste0('[', name, '](', urls, ")"),
photo = paste0('![image](', photoUrl, ')')
) %>%
select(name, position, party, email, phones, photo)
# Replace where photos are missing and where email is missing
##rep.table[rep.table$photo == '![image](NA)','photo'] <- "Not available"
rep.table[rep.table$email == '<NULL>', 'email'] <- "Not available"
# Table objects to return
rep.cols <- c("Name", "Position", "Party", "Email", "Phone", "Photo")
library(plotly)
Animals <- c("giraffes", "orangutans", "monkeys")
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- data.frame(Animals, SF_Zoo, LA_Zoo)
p <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="bar/grouped")
chart_link
library(plotly)
Animals <- c("giraffes", "orangutans", "monkeys")
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
data <- data.frame(Animals, SF_Zoo, LA_Zoo)
p <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
library(plotly)
Animals <- c("giraffes", "orangutans", "monkeys", "bats")
SF_Zoo <- c(20, 14, 23)
LA_Zoo <- c(12, 18, 29)
SE_Zoo <- c(2, 18, 29)
AE_Zoo <- c(12, 8, 9)
data <- data.frame(Animals, SF_Zoo, LA_Zoo, SE_Zoo, AE_Zoo)
p <- plot_ly(data, x = ~Animals, y = ~SF_Zoo, type = 'bar', name = 'SF Zoo') %>%
add_trace(y = ~LA_Zoo, name = 'LA Zoo') %>%
add_trace(y = ~SE_Zoo, name = 'SE Zoo') %>%
add_trace(y = ~AE_Zoo, name = 'AE Zoo') %>%
layout(yaxis = list(title = 'Count'), barmode = 'group')
p
shiny::runApp('Documents/School/2016-2017/Spring/INFO 201/a8-building-apps-aamiller')
shiny::runApp('Documents/School/2016-2017/Spring/INFO 201/a8-building-apps-aamiller')
shiny::runApp('Documents/School/2016-2017/Spring/INFO 201/a8-building-apps-aamiller')
options(shiny.sanitize.errors = TRUE)
setwd("~/")
my.ui <- fluidPage(
# displays the title of the page
titlePanel("Select the max amount of the required nutrient to filter your searches"),
sidebarLayout(
# includes a side bar panel with different widgets
sidebarPanel(
sliderInput("fiber", "Max amount of fiber you want in your cereal",
min = min(data.cereal$fiber), max = max(data.cereal$fiber), value = 1.0, step = 0.1),
sliderInput("calories", "Max amount of calories you want in your cereal",
min = min(data.cereal$calories), max = max(data.cereal$calories), value = 70)
),
mainPanel(
plotlyOutput("plotFinal")
)
)
)
setwd("~/INFO 343/ChocolateNotebook/src/RDataWrangling")
barsData <- read.csv('chocolate-bars.csv', header=TRUE, stringsAsFactors=FALSE)
barsData <- read.csv(file = 'chocolate-bars.csv', header=TRUE, stringsAsFactors=FALSE)
barsData <- read.csv(file = 'chocolate-bars.csv', stringsAsFactors=FALSE)
barsData <- read.csv(file = 'chocolate-bars.csv', stringsAsFactors=FALSE, row.names=NULL)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.csv(file = 'chocolate-bars.csv', stringsAsFactors=FALSE, row.names=NULL)
View(barsData)
barsData <- read.table(file = 'chocolate-bars.csv',  sep=";", header=T, row.names=NULL)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.table(file = 'chocolate-bars.csv',  sep=";", header=T, row.names=NULL)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.table(file = 'chocolate-bars.csv',  sep=";", row.names=NULL)
View(barsData)
barsData <- read.table(file = 'chocolate-bars.csv',  sep=";", row.names=NULL)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.table(file = 'chocolate-bars.csv',  sep=";", row.names=NULL)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.table(file = 'chocolate-bars.csv',  sep=";", row.names=NULL)
barsData <- read.table(file = 'chocolate-bars.csv',  sep=";", dec="/t", row.names=NULL)
barsData <- read.table(file = 'chocolate-bars.csv',  sep=";", dec=",", row.names=NULL)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.table(file = 'chocolate-bars.csv', row.names=NULL)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.table(file = 'chocolate-bars.csv', row.names=NULL)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.table(file = 'chocolate-bars.csv')
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.table(file = 'chocolate-bars.csv', fill=TRUE)
View(barsData)
barsData <- read.table(file = 'chocolate-bars.csv', fill=TRUE, header=TRUE)
View(barsData)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- csv(file = 'chocolate-bars.csv', fill=TRUE, header=TRUE)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.csv(file = 'chocolate-bars.csv', fill=TRUE, header=TRUE)
View(barsData)
uniqueProducerNames <- unique(barsData$Company)
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.csv(file = 'chocolate-bars.csv', fill=TRUE, header=TRUE, stringsAsFactors = FALSE)
uniqueProducerNames <- unique(barsData$Company)
uniqueProducerNames
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.csv(file = 'chocolate-bars.csv', fill=TRUE, header=TRUE, stringsAsFactors = FALSE)
uniqueProducerNames <- unique(barsData$Company)
for(name in uniqueProducerNames) {
print(paste0("{ label: '", name, "', value: '", name.toLower(), "' },"))
}
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.csv(file = 'chocolate-bars.csv', fill=TRUE, header=TRUE, stringsAsFactors = FALSE)
uniqueProducerNames <- unique(barsData$Company)
for(name in uniqueProducerNames) {
print(paste0("{ label: '", name, "', value: '", toLower(name), "' },"))
}
## data-wranging-maker-names.R
## Gets a list of all of the unique chocolate making companies for display in the chocolate journal
barsData <- read.csv(file = 'chocolate-bars.csv', fill=TRUE, header=TRUE, stringsAsFactors = FALSE)
uniqueProducerNames <- unique(barsData$Company)
for(name in uniqueProducerNames) {
print(paste0("{ label: '", name, "', value: '", tolower(name), "' },"))
}
uniqueRegionNames <- unique(barsData$Broad.Bean.Origin)
uniqueRegionNames <- unique(barsData$Broad.Bean.Origin)
for(region in uniqueRegionNames) {
print(paste0("{ label: '", name, "', value: '", tolower(name), "' },"))
}
for(region in uniqueRegionNames) {
print(paste0("{ label: '", region, "', value: '", tolower(name), "' },"))
}
uniqueRegionNames <- unique(barsData$Broad.Bean.Origin)
for(region in uniqueRegionNames) {
print(paste0("{ label: '", region, "', value: '", tolower(name), "' },"))
}
uniqueRegionNames <- unique(barsData$Broad.Bean.Origin)
for(region in uniqueRegionNames) {
print(paste0("{ label: '", region, "', value: '", tolower(name), "' },"))
}
uniqueRegionNames <- unique(barsData$Broad.Bean.Origin)
for(region in uniqueRegionNames) {
print(paste0("{ label: '", region, "', value: '", tolower(region), "' },"))
}
